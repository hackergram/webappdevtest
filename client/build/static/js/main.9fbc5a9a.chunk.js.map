{"version":3,"sources":["icons/close.svg","icons/info.svg","icons/twitter.svg","components/Tracking.js","components/MapLayer.js","components/CityDetailView.js","components/SecNav.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","initGA","trackingID","ReactGA","initialize","PageView","cityName","pageview","MapLayer","props","clickedOnMarker","onMarkerClick","videoData","totalCities","desktopSize","useState","latitude","longitude","width","height","zoom","window","innerWidth","viewport","setViewport","x","y","mouseDownPoint","setMouseDownPoint","mouseUpPoint","setMouseUpPoint","isZoomFriendly","size","useEffect","addEventListener","newWidth","newHeight","innerHeight","prevState","e","clientX","clientY","onClick","mapboxApiAccessToken","onViewportChange","mapStyle","map","city","index","key","Number","coordinates","offsetLeft","offsetTop","className","div","style","String","blocks","length","lineHeight","initial","scale","animate","transition","yoyo","Infinity","ease","duration","color","CityDetailView","selectedCity","onCityDetailClose","currentScrollValue","useMotionValue","touchStart","touchEnd","cityDetailViewEl","useRef","containerAnimControls","useAnimation","headerAnimControls","bodyAnimControls","closeTransition","openTransition","type","damping","variants","open","top","close","childVariants","opacity","scrollToTop","current","scrollTo","a","async","start","changedTouches","get","ref","exit","onScroll","set","nativeEvent","target","scrollTop","overflow","scrollBehavior","overscrollBehaviorY","src","alt","slice","reverse","videoObj","link","indexOf","id","split","date","caption","onLoad","display","url","href","SecNav","handleAboutClicked","datacontent","backgroundImage","info","fetchJSON","fetch","res","json","body","status","Error","message","config","apiKey","process","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","databaseURL","REACT_APP_DATABASE_URL","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","appId","REACT_APP_APP_ID","measurementId","REACT_APP_MEASUREMENT_ID","App","setSelectedCity","setVideoData","setTotalCities","setIsAboutOpen","Firebase","initializeApp","REACT_APP_GA_TRACKING_ID","then","states","citiesArray","Object","keys","hashCity","location","undefined","formattedHashCity","charAt","toUpperCase","catch","err","console","log","Helmet","hash","preventDefault","left","behavior","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9fbc5a9a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/close.a50ed734.svg\";","module.exports = __webpack_public_path__ + \"static/media/info.6992069b.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter.7a17a52d.svg\";","import ReactGA from \"react-ga\";\r\n\r\nexport const initGA = (trackingID) => {           \r\n    ReactGA.initialize(trackingID); \r\n }\r\n\r\n export const PageView = (cityName) => {  \r\n    ReactGA.pageview(cityName); \r\n}\r\n\r\nexport const Event = (category, action, label) => {\r\n    ReactGA.event({\r\n      category: category,\r\n      action: action,\r\n      label: label\r\n    });\r\n  };","import React, {useState, useEffect} from 'react';\r\nimport ReactMapGL, {Marker} from 'react-map-gl';\r\nimport {motion} from 'framer-motion';\r\nimport {PageView } from \"./Tracking\";\r\n\r\nexport function MapLayer(props) {\r\n\r\n    let clickedOnMarker = false;\r\n    const {onMarkerClick, videoData, totalCities, desktopSize} = props;\r\n    const [viewport, setViewport] = useState({\r\n        latitude: 21.2787,\r\n        longitude: 81.8661,\r\n        width: 'calc(var(--vw, 1vw) * 100)',\r\n        height: 'calc(var(--vh, 1vh) * 100)',\r\n        zoom: (window.innerWidth < desktopSize ? 3 : 4)\r\n    })\r\n    const [mouseDownPoint, setMouseDownPoint] = useState({x: 0, y: 0})\r\n    const [mouseUpPoint, setMouseUpPoint] = useState({x: 0, y: 0})\r\n\r\n    const isZoomFriendly = (size) => {\r\n        return (viewport.zoom < 6 && size <= 3) ? false : true;\r\n    }\r\n\r\n    useEffect(()=> {\r\n        window.addEventListener('resize', () => {\r\n            let newWidth = window.innerWidth;\r\n            let newHeight = window.innerHeight;\r\n            setViewport(prevState => {return {...prevState, width: newWidth, height: newHeight}});\r\n          });\r\n        window.addEventListener('mousedown', e => setMouseDownPoint({x: e.clientX, y: e.clientY}));\r\n        window.addEventListener('mouseup', e => setMouseUpPoint({x:e.clientX, y:e.clientY}));\r\n    }, [])\r\n\r\n    return (\r\n        <div\r\n            onClick = {(e)=> {\r\n                if(!clickedOnMarker &&\r\n                    mouseDownPoint.x === mouseUpPoint.x &&\r\n                    mouseDownPoint.y === mouseUpPoint.y\r\n                    ){\r\n                        onMarkerClick(e, null);\r\n                        clickedOnMarker=false\r\n                    }\r\n                }\r\n            }\r\n        >\r\n        <ReactMapGL\r\n            {...viewport}\r\n            mapboxApiAccessToken={\"pk.eyJ1IjoidGhpc2lzYW5vdGhlcnRlc3QiLCJhIjoiY2s4cG9tOXFyMTV5djNrcXpnYmtxZ2hmMCJ9.z-svIPZaBRzZxYBQAjL30g\"}\r\n            onViewportChange = {viewport => {setViewport(viewport)}}\r\n            mapStyle=\"mapbox://styles/thisisanothertest/ck8poooti10i71in24melik54\"\r\n        >\r\n            {totalCities.map((city, index) => {\r\n                return (\r\n                    <Marker\r\n                        key={index}\r\n                        latitude = {Number(videoData[city].coordinates.latitude)}\r\n                        longitude = {Number(videoData[city].coordinates.longitude)}\r\n                        offsetLeft={-24}\r\n                        offsetTop={-24}\r\n                    >\r\n                        <button className='marker_btn' onClick={e => {onMarkerClick(e, city); clickedOnMarker=true; PageView(city)}}>\r\n                            <motion.div\r\n                                className=\"marker_txt\"\r\n                                style = {{\r\n                                    width: `calc(1rem + 0.2 * ${String(videoData[city].blocks.length)}rem)`,\r\n                                    height: `calc(1rem + 0.2 * ${String(videoData[city].blocks.length)}rem)`,\r\n                                    lineHeight: `calc(1rem + 0.2 * ${String(videoData[city].blocks.length)}rem)`\r\n                                }}\r\n                                initial = {{scale: 1}}\r\n                                animate= {{scale: 1.05}}\r\n                                transition = {{\r\n                                    yoyo: Infinity,\r\n                                    ease: 'easeOut',\r\n                                    duration: 0.5\r\n                                }}\r\n                                ><p>{isZoomFriendly(videoData[city].blocks.length) && videoData[city].blocks.length}</p>\r\n                            </motion.div>\r\n                            {isZoomFriendly(videoData[city].blocks.length) && <p style={{color: '#fffcf2'}}>{city}</p>}\r\n                        </button>\r\n                    </Marker>\r\n                )})\r\n            }\r\n        </ReactMapGL>\r\n        </div>\r\n    )\r\n}\r\n\r\n// STYLES:\r\n// mapbox://styles/kshivanku/ck4o1gm6303131enp3jldbqim\r\n","import React, { useEffect, useRef } from 'react';\r\nimport {motion, useMotionValue, useAnimation, AnimatePresence} from 'framer-motion';\r\nimport {TwitterVideoEmbed} from 'react-twitter-embed';\r\nimport InstagramEmbed from 'react-instagram-embed';\r\nimport close from '../icons/close.svg'\r\n\r\nexport function CityDetailView(props) {\r\n    const {selectedCity, videoData, onCityDetailClose, desktopSize } = props;\r\n    let currentScrollValue = useMotionValue(0);\r\n    let touchStart = 0;\r\n    let touchEnd = 0;\r\n    const cityDetailViewEl = useRef(null)\r\n    // let prevScrollValue = useMotionValue(0);\r\n    const containerAnimControls = useAnimation();\r\n    const headerAnimControls = useAnimation();\r\n    const bodyAnimControls = useAnimation();\r\n\r\n    const closeTransition = {ease: 'easeOut', duration: 0.2}\r\n    const openTransition = {type: 'spring', damping: 16}\r\n\r\n    const variants = {\r\n        open: (window.innerWidth > desktopSize) ? {width: '30em', top: 0, transition: openTransition}:{width: 'calc(var(--vw, 1vw) * 100)', top: 'calc(var(--vh, 1vh) * 20)', transition: openTransition},\r\n        close: (window.innerWidth > desktopSize) ? {width: 0, top: 0, y: 0, transition: closeTransition} : {width: 'calc(var(--vw, 1vw) * 100)', top: 'calc(var(--vh, 1vh) * 100)', y: 0, transition: closeTransition}\r\n    }\r\n\r\n    const childVariants = {\r\n        open: {opacity: 1, y: 0, transition: {ease: 'easeOut'}}, close: {opacity: 0, y: 10, transition: {ease: 'linear'}}\r\n    }\r\n\r\n    const scrollToTop = {top: 0, transition:{ease:'linear', duration: 0.2}}\r\n\r\n    const handleInOutAnimation = async () => {\r\n        if(selectedCity) {\r\n            containerAnimControls.start(variants.open)\r\n            await headerAnimControls.start(childVariants.open)\r\n            bodyAnimControls.start(childVariants.open)\r\n        }\r\n        else { \r\n            await headerAnimControls.start(childVariants.close)\r\n            await bodyAnimControls.start(childVariants.close)\r\n            containerAnimControls.start(variants.close)\r\n        }\r\n    }\r\n\r\n    useEffect(()=> {\r\n        cityDetailViewEl.current.scrollTo(0,0);\r\n        handleInOutAnimation();\r\n        cityDetailViewEl.current.addEventListener('touchstart', function(e){touchStart=e.changedTouches[0].clientY})\r\n        cityDetailViewEl.current.addEventListener('touchend', function(e) {\r\n        touchEnd = e.changedTouches[0].clientY;\r\n        if(currentScrollValue.get() <= 0 && touchEnd > touchStart) {\r\n            onCityDetailClose();\r\n            touchStart = 0;\r\n            touchEnd = 0;\r\n        }\r\n        });\r\n\r\n        // window.addEventListener('wheel', function() {\r\n        //     setTimeout(()=> {\r\n        //         if(currentScrollValue.get() === prevScrollValue.get()) {\r\n        //             onCityDetailClose();\r\n        //             prevScrollValue.set(0)\r\n        //         }\r\n        //         else {\r\n        //             prevScrollValue.set(currentScrollValue.get())\r\n        //         }\r\n        //     }, 500)\r\n        // })\r\n    }, [selectedCity])\r\n\r\n    return (\r\n        <AnimatePresence>\r\n            <motion.div\r\n                className=\"cityDetailView\"\r\n                ref = {cityDetailViewEl}\r\n                variants={variants}\r\n                initial=\"close\"\r\n                exit=\"close\"\r\n                animate = {containerAnimControls}\r\n                onScroll = {(e) => {\r\n                    currentScrollValue.set(e.nativeEvent.target.scrollTop);\r\n                    if(currentScrollValue.get() > 0) {\r\n                        containerAnimControls.start(scrollToTop)\r\n                    }\r\n                }}\r\n                style={{height: 'calc(var(--vh, 1vh) * 100)', overflow: 'scroll', scrollBehavior: 'smooth', overscrollBehaviorY: 'none'}}\r\n            >   \r\n                <motion.div \r\n                    className=\"cityDetailView_Header\" \r\n                    variants={childVariants}\r\n                    initial=\"close\"\r\n                    animate = {headerAnimControls}\r\n                >\r\n                    <h1>{selectedCity}</h1>\r\n                    <button className=\"close_btn\" onClick={(e) => onCityDetailClose(e)}>\r\n                        <img src={close} alt=\"close icon\" />\r\n                    </button>\r\n                </motion.div>\r\n                <motion.div \r\n                    className=\"cityDetailView_videoList\" \r\n                    variants={childVariants}\r\n                    initial=\"close\"\r\n                    animate={bodyAnimControls}\r\n                    \r\n                >\r\n                    {videoData[selectedCity].blocks.slice(0).reverse().map((videoObj, index) => {\r\n                        if(videoObj.link.indexOf('twitter.com') !== -1) {\r\n                            let id = videoObj.link.split(/\\/?\\//)[4].split('?')[0];\r\n                            return (\r\n                                <div className=\"linkCard\" key={id + index}>\r\n                                    <p>{videoObj.date}</p>\r\n                                    <h2>{videoObj.caption}</h2>\r\n                                    <TwitterVideoEmbed id={id} \r\n                                        onLoad={e => {if(e){e.style.display = \"inline-block\"}}} \r\n                                    />\r\n                                </div>\r\n                            )\r\n                        }\r\n                        else if(videoObj.link.indexOf('instagram.com') !== -1) {\r\n                            \r\n                            return (\r\n                                <div className=\"linkCard\" key={videoObj.link+ index}>\r\n                                    <p>{videoObj.date}</p>\r\n                                    <h2>{videoObj.caption}</h2>\r\n                                    <InstagramEmbed url={videoObj.link} \r\n                                        onLoad={e => {if(e){e.style.display = \"inline-block\"}}} \r\n                                    />\r\n                                </div>\r\n                            )\r\n                        }\r\n\r\n                        else {\r\n                            return (\r\n                                <div className=\"linkCard\" key={index}>\r\n                                    <p>{videoObj.date}</p>\r\n                                    <h2>{videoObj.caption}</h2>\r\n                                    <a href={videoObj.link} target=\"_blank\" className='rawLink'>{videoObj.link} </a>\r\n                                </div>\r\n                            )\r\n                        }   \r\n                    })}\r\n                </motion.div>  \r\n              \r\n            </motion.div>\r\n        </AnimatePresence>\r\n    )\r\n}","import React from 'react';\r\nimport info from '../icons/info.svg'\r\nimport twitter from '../icons/twitter.svg'\r\nimport {PageView, Event} from \"./Tracking\"\r\n\r\nexport function SecNav(props) {\r\n    let {handleAboutClicked, desktopSize} = props\r\n    return (\r\n        <ul className=\"secNavContainer\">\r\n            <li><a\r\n                href=\"https://hackergram.org\"\r\n                datacontent=\"हैकरgram Web Developer Puzzler #1\"\r\n                style={{backgroundImage: `url(${info})`}}\r\n                onClick={()=> {\r\n                    handleAboutClicked();\r\n                    PageView('About');\r\n            }}></a></li>\r\n            {}\r\n        </ul>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Firebase from \"firebase\";\r\nimport { PageView, initGA } from \"./Tracking\";\r\nimport { MapLayer } from \"./MapLayer.js\";\r\nimport { CityDetailView } from \"./CityDetailView.js\";\r\n//import {SubmitForm} from './SubmitForm.js';\r\n//import {IntroScreen} from './IntroScreen';\r\n//import {About} from './About'\r\nimport { SecNav } from \"./SecNav.js\";\r\nimport \"./CSS/App.css\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nconst fetchJSON = async () => {\r\n  const res = await fetch(\"/getBlockData\");\r\n  const body = await res.json();\r\n  if (res.status !== 200) throw Error(body.message);\r\n  return body;\r\n};\r\n\r\nconst config = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID,\r\n};\r\n\r\nfunction App() {\r\n  const [selectedCity, setSelectedCity] = useState(null);\r\n  const [videoData, setVideoData] = useState({});\r\n  const [totalCities, setTotalCities] = useState([]);\r\n  const [isAboutOpen, setIsAboutOpen] = useState(false);\r\n  const desktopSize = 1024;\r\n\r\n  useEffect(() => {\r\n    Firebase.initializeApp(config);\r\n    initGA(process.env.REACT_APP_GA_TRACKING_ID);\r\n    PageView(\"Intro\");\r\n    fetchJSON()\r\n      .then((res) => {\r\n        setVideoData(res.states);\r\n        let citiesArray = Object.keys(res.states);\r\n        let urlLocation = window.location.href;\r\n        let hashCity = urlLocation.split(\"#\")[1];\r\n        if (hashCity !== undefined && hashCity.length > 1) {\r\n          let formattedHashCity =\r\n            hashCity.charAt(0).toUpperCase() + hashCity.slice(1);\r\n          if (citiesArray.indexOf(formattedHashCity) !== -1) {\r\n            setSelectedCity(formattedHashCity);\r\n          }\r\n        }\r\n        setTotalCities(citiesArray);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }, []);\r\n\r\n  const onNewLinkSubmit = (newData) => {\r\n    let newPostKey = Firebase.database().ref(\"/\").push();\r\n    newPostKey.set(newData);\r\n  };\r\n\r\n  const onMarkerClick = (e, city) => {\r\n    e.preventDefault();\r\n    if (city) {\r\n      window.location.hash = city;\r\n      window.scrollTo({ top: 0, left: 0, behavior: \"smooth\" });\r\n    } else {\r\n      window.location.hash = \"\";\r\n    }\r\n    if (selectedCity !== city) {\r\n      setSelectedCity(city);\r\n    }\r\n  };\r\n\r\n  const onCityDetailClose = (e) => {\r\n    e && e.preventDefault();\r\n    setSelectedCity(null);\r\n  };\r\n\r\n  const handleAboutClicked = () => {\r\n    window.location.hash = \"about\";\r\n    setIsAboutOpen(true);\r\n  };\r\n\r\n  const handleAboutClose = () => {\r\n    window.location.hash = \"/\";\r\n    setIsAboutOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Helmet>\r\n        <title> Forked by Viresh Uberoy </title>\r\n      </Helmet>\r\n      <SecNav handleAboutClicked={handleAboutClicked} />\r\n      <MapLayer\r\n        className=\"mapLayer\"\r\n        onMarkerClick={onMarkerClick}\r\n        videoData={videoData}\r\n        totalCities={totalCities}\r\n        desktopSize={desktopSize}\r\n      />\r\n      {selectedCity && (\r\n        <CityDetailView\r\n          selectedCity={selectedCity}\r\n          videoData={videoData}\r\n          onCityDetailClose={onCityDetailClose}\r\n          desktopSize={desktopSize}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}